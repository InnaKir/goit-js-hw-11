const e=document.querySelector(".search-form"),n=document.querySelector('input[name="searchQuery"]'),o=document.querySelector(".gallery"),t=(document.querySelector(".load-more"),document.querySelector(".js-guard"));function s(e){const n=e.map((({webformatURL:e,largeImageURL:n,tags:o,likes:t,views:s,comments:r,downloads:a})=>`<a class="big-photo-ref" href="${n}"><div class="photo-card">\n  <img src="${e}" alt="${o}" loading="lazy" />\n  <div class="info">\n    <p class="info-item">\n      <b>Likes ${t}</b>\n    </p>\n    <p class="info-item">\n      <b>Views ${s}</b>\n    </p>\n    <p class="info-item">\n      <b>Comments ${r}</b>\n    </p>\n    <p class="info-item">\n      <b>Downloads ${a}</b>\n    </p>\n  </div>\n</div>`)).join("");o.insertAdjacentHTML("beforeend",n)}e.addEventListener("submit",(function(e){e.preventDefault();const t=n.value.trim();o.innerHTML="",a(t)}));let r=1;async function a(e){try{const n=await fetch(`https://pixabay.com/api/?key=35004326-8dd8488139d702cdf649647db&q=${e}&image_type=photo&orientation=horizontal&safesearch=true&per_page=5&page=${r}`);if(!n.ok)throw new Error(n.status);const o=await n.json();console.log("result",o),s(o.hits),c.observe(t)}catch(e){throw e}}const c=new IntersectionObserver((function(e,o){console.log(e),e.forEach((e=>{if(e.isIntersecting){const e=n.value;r+=1,a(e).then((e=>{s(e.hits)}))}}))}),{root:null,rootMargin:"300px",threshold:1});console.log("IntersectionObserver",c);
//# sourceMappingURL=index.d7bda3ba.js.map
