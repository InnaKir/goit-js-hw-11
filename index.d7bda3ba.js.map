{"mappings":"AAAA,MAIMA,EAAOC,SAASC,cAAc,gBAC9BC,EAAQF,SAASC,cAAc,6BAC/BE,EAAUH,SAASC,cAAc,YAEjCG,GADcJ,SAASC,cAAc,cAC7BD,SAASC,cAAc,cAIrC,SAASI,EAAOC,GACd,MAAMC,EAASD,EACZE,KACC,EAACC,aACCA,EAAYC,cACZA,EAAaC,KACbA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,KAEO,kCAAkCL,4CACnCD,WAAsBE,yFAGnBC,8DAGAC,iEAGGC,kEAGCC,sCAMhBC,KAAK,IACRb,EAAQc,mBAAmB,YAAaV,E,CAY1CR,EAAKmB,iBAAiB,UATtB,SAAwBC,GACtBA,EAAMC,iBAEN,MAAMC,EAAQnB,EAAMoB,MAAMC,OAE1BpB,EAAQqB,UAAY,GAEpBC,EAAWJ,E,IAIb,IAAIK,EAAO,EAEXC,eAAeF,EAAWJ,GACxB,IACE,MAAMO,QAAiBC,MACrB,qEAAyCR,6EAA2FK,KAEtI,IAAKE,EAASE,GACZ,MAAM,IAAIC,MAAMH,EAASI,QAE3B,MAAMC,QAAeL,EAASM,OAE9BC,QAAQC,IAAI,SAAUH,GAEtB5B,EAAO4B,EAAOI,MACdC,EAASC,QAAQnC,E,CACjB,MAAOoC,GACP,MAAMA,C,EAIV,MAMMF,EAAW,IAAIG,sBAGrB,SAAwBC,EAASH,GAC/BJ,QAAQC,IAAIM,GACZA,EAAQC,SAAQC,IACd,GAAIA,EAAMC,eAAgB,CACxB,MAAMxB,EAAQnB,EAAMoB,MACpBI,GAAQ,EACRD,EAAWJ,GAAayB,MAAKC,IAE3B1C,EAAO0C,EAAKV,KAAK,G,OAjBT,CACdW,KAAM,KACNC,WAAY,QACZC,UAAW,IAIbf,QAAQC,IAAI,uBAAwBE","sources":["src/index.js"],"sourcesContent":["const BASE_URL = 'https://pixabay.com/api/';\nconst KEY = '35004326-8dd8488139d702cdf649647db';\nconst per_page = 5;\n\nconst form = document.querySelector('.search-form');\nconst input = document.querySelector('input[name=\"searchQuery\"]');\nconst gallery = document.querySelector('.gallery');\nconst loadMoreBtn = document.querySelector('.load-more');\nconst guard = document.querySelector('.js-guard');\n\n// console.log('guard', guard);\n\nfunction markUp(arrayPhoto) {\n  const images = arrayPhoto\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<a class=\"big-photo-ref\" href=\"${largeImageURL}\"><div class=\"photo-card\">\n  <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n  <div class=\"info\">\n    <p class=\"info-item\">\n      <b>Likes ${likes}</b>\n    </p>\n    <p class=\"info-item\">\n      <b>Views ${views}</b>\n    </p>\n    <p class=\"info-item\">\n      <b>Comments ${comments}</b>\n    </p>\n    <p class=\"info-item\">\n      <b>Downloads ${downloads}</b>\n    </p>\n  </div>\n</div>`;\n      }\n    )\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', images);\n}\n\nfunction hendlSearchImg(event) {\n  event.preventDefault();\n  //   const query = event.target.elements['searchQuery'].value.trim();\n  const query = input.value.trim();\n  //   console.log(query);\n  gallery.innerHTML = '';\n\n  fetchPhoto(query);\n}\nform.addEventListener('submit', hendlSearchImg);\n\nlet page = 1;\n\nasync function fetchPhoto(query) {\n  try {\n    const response = await fetch(\n      `https://pixabay.com/api/?key=${KEY}&q=${query}&image_type=photo&orientation=horizontal&safesearch=true&per_page=${per_page}&page=${page}`\n    );\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    const result = await response.json();\n\n    console.log('result', result);\n\n    markUp(result.hits);\n    observer.observe(guard);\n  } catch (err) {\n    throw err;\n  }\n}\n\nconst options = {\n  root: null,\n  rootMargin: '300px',\n  threshold: 1.0,\n};\n\nconst observer = new IntersectionObserver(onInfinityLoad, options);\nconsole.log('IntersectionObserver', observer);\n\nfunction onInfinityLoad(entries, observe) {\n  console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      const query = input.value;\n      page += 1;\n      fetchPhoto(query, page).then(data => {\n        // console.log('date', date);\n        markUp(data.hits);\n      });\n    }\n  });\n}\n"],"names":["$1f0dc3b9307be026$var$form","document","querySelector","$1f0dc3b9307be026$var$input","$1f0dc3b9307be026$var$gallery","$1f0dc3b9307be026$var$guard","$1f0dc3b9307be026$var$markUp","arrayPhoto","images","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","addEventListener","event","preventDefault","query","value","trim","innerHTML","$1f0dc3b9307be026$var$fetchPhoto","$1f0dc3b9307be026$var$page","async","response","fetch","ok","Error","status","result","json","console","log","hits","$1f0dc3b9307be026$var$observer","observe","err","IntersectionObserver","entries","forEach","entry","isIntersecting","then","data","root","rootMargin","threshold"],"version":3,"file":"index.d7bda3ba.js.map"}